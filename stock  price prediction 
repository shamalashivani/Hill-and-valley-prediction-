{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOrXJDe6ccBCLm4GBJfKPEw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shamalashivani/Hill-and-valley-prediction-/blob/main/stock%20%20price%20prediction%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "rljkKqhyaVDR"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "import yfinance as yf\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = yf.download(\"AAPL\", start = \"2008-01-01\", end = \"2023-01-01\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPB-jrhQaf-f",
        "outputId": "438de510-0ffc-4c7c-81d2-64a732b11d34"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = data[['Close']]"
      ],
      "metadata": {
        "id": "kWGxtHI8agK_"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "XHrjcizCagUP",
        "outputId": "72c1f621-e58c-4285-80ae-be65d2c90f41"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price                         Close\n",
              "Ticker                         AAPL\n",
              "Date                               \n",
              "2008-01-02 00:00:00+00:00  6.958571\n",
              "2008-01-03 00:00:00+00:00  6.961786\n",
              "2008-01-04 00:00:00+00:00  6.430357\n",
              "2008-01-07 00:00:00+00:00  6.344286\n",
              "2008-01-08 00:00:00+00:00  6.116071"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9dee1396-e3ea-4f31-8358-9dd0b737d1c7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>AAPL</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2008-01-02 00:00:00+00:00</th>\n",
              "      <td>6.958571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-03 00:00:00+00:00</th>\n",
              "      <td>6.961786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-04 00:00:00+00:00</th>\n",
              "      <td>6.430357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-07 00:00:00+00:00</th>\n",
              "      <td>6.344286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-08 00:00:00+00:00</th>\n",
              "      <td>6.116071</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9dee1396-e3ea-4f31-8358-9dd0b737d1c7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9dee1396-e3ea-4f31-8358-9dd0b737d1c7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9dee1396-e3ea-4f31-8358-9dd0b737d1c7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fa967ca-037c-40fe-b116-e7db27e56bed\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fa967ca-037c-40fe-b116-e7db27e56bed')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fa967ca-037c-40fe-b116-e7db27e56bed button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 3777,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2008-01-02 00:00:00+00:00\",\n        \"max\": \"2022-12-30 00:00:00+00:00\",\n        \"num_unique_values\": 3777,\n        \"samples\": [\n          \"2022-01-07 00:00:00+00:00\",\n          \"2011-12-16 00:00:00+00:00\",\n          \"2020-01-06 00:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"AAPL\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46.79634036353,\n        \"min\": 2.7928569316864014,\n        \"max\": 182.00999450683594,\n        \"num_unique_values\": 3625,\n        \"samples\": [\n          9.54464340209961,\n          18.452856063842773,\n          50.310001373291016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"Target\"] = data[\"Close\"].shift(-1)"
      ],
      "metadata": {
        "id": "M6_nnv_Tagbe"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.dropna()"
      ],
      "metadata": {
        "id": "aBWm3gcgahy2"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = data[[\"Close\"]]"
      ],
      "metadata": {
        "id": "gNj31nOQcb13"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M32fAlCncb9a",
        "outputId": "e9419fc6-9a6e-4383-8f89-8da9b32266ad"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3776, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "BAYoh02HccE6",
        "outputId": "6c19d444-c239-4b3b-c6c6-9ffff4f2dcc0"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price                           Close\n",
              "Ticker                           AAPL\n",
              "Date                                 \n",
              "2008-01-02 00:00:00+00:00    6.958571\n",
              "2008-01-03 00:00:00+00:00    6.961786\n",
              "2008-01-04 00:00:00+00:00    6.430357\n",
              "2008-01-07 00:00:00+00:00    6.344286\n",
              "2008-01-08 00:00:00+00:00    6.116071\n",
              "...                               ...\n",
              "2022-12-22 00:00:00+00:00  132.229996\n",
              "2022-12-23 00:00:00+00:00  131.860001\n",
              "2022-12-27 00:00:00+00:00  130.029999\n",
              "2022-12-28 00:00:00+00:00  126.040001\n",
              "2022-12-29 00:00:00+00:00  129.610001\n",
              "\n",
              "[3776 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-32eef495-de11-4c6c-ba85-11e11f3e65ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>AAPL</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2008-01-02 00:00:00+00:00</th>\n",
              "      <td>6.958571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-03 00:00:00+00:00</th>\n",
              "      <td>6.961786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-04 00:00:00+00:00</th>\n",
              "      <td>6.430357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-07 00:00:00+00:00</th>\n",
              "      <td>6.344286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-01-08 00:00:00+00:00</th>\n",
              "      <td>6.116071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-22 00:00:00+00:00</th>\n",
              "      <td>132.229996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-23 00:00:00+00:00</th>\n",
              "      <td>131.860001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-27 00:00:00+00:00</th>\n",
              "      <td>130.029999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-28 00:00:00+00:00</th>\n",
              "      <td>126.040001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-29 00:00:00+00:00</th>\n",
              "      <td>129.610001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3776 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-32eef495-de11-4c6c-ba85-11e11f3e65ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-32eef495-de11-4c6c-ba85-11e11f3e65ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-32eef495-de11-4c6c-ba85-11e11f3e65ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8d1cce52-0a8e-427b-b66f-cb521a618151\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d1cce52-0a8e-427b-b66f-cb521a618151')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8d1cce52-0a8e-427b-b66f-cb521a618151 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d5570038-18a5-4c7e-8920-3e8d17247f8b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d5570038-18a5-4c7e-8920-3e8d17247f8b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 3776,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2008-01-02 00:00:00+00:00\",\n        \"max\": \"2022-12-29 00:00:00+00:00\",\n        \"num_unique_values\": 3776,\n        \"samples\": [\n          \"2022-01-06 00:00:00+00:00\",\n          \"2011-12-16 00:00:00+00:00\",\n          \"2020-01-03 00:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"AAPL\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46.782186859720035,\n        \"min\": 2.7928569316864014,\n        \"max\": 182.00999450683594,\n        \"num_unique_values\": 3624,\n        \"samples\": [\n          9.54464340209961,\n          18.452856063842773,\n          160.5500030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = data[['Target']]"
      ],
      "metadata": {
        "id": "Cjhm_25TccKY"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "id": "B0x3qX6TccOg"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LinearRegression()"
      ],
      "metadata": {
        "id": "hD1SLH9xccS2"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "rUWmtNF-fK-_",
        "outputId": "c9895763-0f20-484e-91d0-414f812ed294"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "v8LXKc41fLFc"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-2BoZx8ZjjgZ",
        "outputId": "06d94419-846d-4cc5-db96-ed7f5f155870"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[172.08918444],\n",
              "       [ 13.63120866],\n",
              "       [ 74.40609945],\n",
              "       [ 18.81979427],\n",
              "       [ 40.02931813],\n",
              "       [149.42977652],\n",
              "       [ 54.74543495],\n",
              "       [141.73657789],\n",
              "       [  6.83517135],\n",
              "       [ 20.53086091],\n",
              "       [ 20.34935659],\n",
              "       [ 26.97639649],\n",
              "       [ 51.34152061],\n",
              "       [ 46.386959  ],\n",
              "       [  3.20866469],\n",
              "       [ 74.6462047 ],\n",
              "       [ 18.19631861],\n",
              "       [  6.20776778],\n",
              "       [  6.64116203],\n",
              "       [ 26.11603844],\n",
              "       [ 17.96658221],\n",
              "       [ 15.82140482],\n",
              "       [ 19.16708173],\n",
              "       [140.49605701],\n",
              "       [ 10.11188993],\n",
              "       [114.67282856],\n",
              "       [ 46.94469346],\n",
              "       [126.81037088],\n",
              "       [  3.46341373],\n",
              "       [  4.12654605],\n",
              "       [ 39.51410469],\n",
              "       [161.70486531],\n",
              "       [154.81200223],\n",
              "       [ 11.38491886],\n",
              "       [ 11.89548788],\n",
              "       [  8.6795083 ],\n",
              "       [142.13673803],\n",
              "       [ 23.49244898],\n",
              "       [ 53.58244949],\n",
              "       [ 47.08224756],\n",
              "       [ 11.61822922],\n",
              "       [  4.61639266],\n",
              "       [  6.79658348],\n",
              "       [ 34.99222558],\n",
              "       [  3.70851545],\n",
              "       [ 18.52395603],\n",
              "       [ 78.31272126],\n",
              "       [166.21674957],\n",
              "       [ 96.24767797],\n",
              "       [ 29.26734729],\n",
              "       [ 42.24774238],\n",
              "       [ 18.58290997],\n",
              "       [ 37.67333978],\n",
              "       [149.33972751],\n",
              "       [ 24.502869  ],\n",
              "       [ 11.07550419],\n",
              "       [ 39.05141475],\n",
              "       [  5.75722364],\n",
              "       [ 60.85797124],\n",
              "       [ 18.79764075],\n",
              "       [ 14.78990462],\n",
              "       [ 23.6928897 ],\n",
              "       [132.61277696],\n",
              "       [ 11.58178658],\n",
              "       [132.10257048],\n",
              "       [  9.10146992],\n",
              "       [130.96209728],\n",
              "       [ 28.51703557],\n",
              "       [116.0459042 ],\n",
              "       [ 23.58998936],\n",
              "       [179.47225667],\n",
              "       [ 11.38063127],\n",
              "       [ 50.47615941],\n",
              "       [ 26.5087015 ],\n",
              "       [ 18.90768708],\n",
              "       [  4.58495078],\n",
              "       [ 31.93345586],\n",
              "       [ 35.98263874],\n",
              "       [  7.30429411],\n",
              "       [164.95621611],\n",
              "       [ 28.17189287],\n",
              "       [147.13881618],\n",
              "       [ 27.27402075],\n",
              "       [ 18.04304143],\n",
              "       [ 19.14742978],\n",
              "       [  4.38308087],\n",
              "       [ 57.3515172 ],\n",
              "       [ 38.95887371],\n",
              "       [ 45.03139628],\n",
              "       [ 27.65917909],\n",
              "       [ 19.47077769],\n",
              "       [ 28.81215826],\n",
              "       [ 33.1664663 ],\n",
              "       [  8.95676697],\n",
              "       [ 41.70501354],\n",
              "       [ 20.90565994],\n",
              "       [174.81031617],\n",
              "       [ 52.3269268 ],\n",
              "       [ 48.74294117],\n",
              "       [  4.98654633],\n",
              "       [ 35.59998006],\n",
              "       [  6.05806264],\n",
              "       [  8.44441097],\n",
              "       [ 29.18981569],\n",
              "       [ 14.95354396],\n",
              "       [ 29.68752193],\n",
              "       [  3.8617931 ],\n",
              "       [ 42.5303572 ],\n",
              "       [ 12.1413042 ],\n",
              "       [  2.95927514],\n",
              "       [ 24.26777072],\n",
              "       [ 10.92365621],\n",
              "       [ 19.41504088],\n",
              "       [  3.82249088],\n",
              "       [ 11.80866554],\n",
              "       [ 54.11517203],\n",
              "       [132.37268698],\n",
              "       [120.65781323],\n",
              "       [  8.890668  ],\n",
              "       [ 14.2575408 ],\n",
              "       [ 20.43546529],\n",
              "       [  5.15340089],\n",
              "       [ 47.84756872],\n",
              "       [ 47.84506524],\n",
              "       [ 42.34277927],\n",
              "       [170.17838692],\n",
              "       [  4.66284016],\n",
              "       [ 22.31303061],\n",
              "       [ 23.07227434],\n",
              "       [ 52.66957175],\n",
              "       [  6.85232173],\n",
              "       [ 11.99624347],\n",
              "       [ 24.12771314],\n",
              "       [ 18.96342389],\n",
              "       [ 24.55789217],\n",
              "       [ 28.07435249],\n",
              "       [154.38183084],\n",
              "       [151.84076659],\n",
              "       [  6.78157738],\n",
              "       [  3.52879786],\n",
              "       [  4.69035126],\n",
              "       [ 16.2033489 ],\n",
              "       [  5.8772734 ],\n",
              "       [ 13.56832586],\n",
              "       [ 27.86426422],\n",
              "       [ 46.26691019],\n",
              "       [  6.50646299],\n",
              "       [ 70.74707806],\n",
              "       [  8.53873613],\n",
              "       [  5.87405819],\n",
              "       [  4.54564832],\n",
              "       [115.11551736],\n",
              "       [ 37.09810003],\n",
              "       [ 13.76519358],\n",
              "       [166.10670324],\n",
              "       [ 50.89633215],\n",
              "       [  7.03311049],\n",
              "       [ 27.36905955],\n",
              "       [ 20.2135866 ],\n",
              "       [119.55735757],\n",
              "       [ 28.85717704],\n",
              "       [ 60.3952813 ],\n",
              "       [  6.92485161],\n",
              "       [ 20.81562238],\n",
              "       [133.1830212 ],\n",
              "       [ 20.74523677],\n",
              "       [ 23.46243583],\n",
              "       [  7.17852804],\n",
              "       [ 33.04141434],\n",
              "       [  4.76323845],\n",
              "       [  6.07021083],\n",
              "       [  4.50098779],\n",
              "       [ 17.988377  ],\n",
              "       [  3.26940393],\n",
              "       [174.87033867],\n",
              "       [149.71989034],\n",
              "       [130.10173922],\n",
              "       [  3.47627603],\n",
              "       [ 14.92388858],\n",
              "       [ 24.13378675],\n",
              "       [144.91789226],\n",
              "       [ 27.97681212],\n",
              "       [ 63.25897028],\n",
              "       [148.10922056],\n",
              "       [142.72697959],\n",
              "       [ 19.71266514],\n",
              "       [ 44.2085561 ],\n",
              "       [ 23.83259045],\n",
              "       [ 29.84258704],\n",
              "       [ 28.77964544],\n",
              "       [ 12.52753682],\n",
              "       [ 37.61831661],\n",
              "       [161.10462509],\n",
              "       [ 27.16397442],\n",
              "       [ 35.20231195],\n",
              "       [ 12.86446211],\n",
              "       [123.60904392],\n",
              "       [ 43.71835076],\n",
              "       [  8.03709911],\n",
              "       [153.80158794],\n",
              "       [127.92083284],\n",
              "       [ 77.42735893],\n",
              "       [  4.42738505],\n",
              "       [  4.0447259 ],\n",
              "       [  6.27601008],\n",
              "       [  6.29673392],\n",
              "       [149.31973019],\n",
              "       [ 32.43616334],\n",
              "       [  3.52736819],\n",
              "       [119.27724241],\n",
              "       [  4.44167703],\n",
              "       [126.18011179],\n",
              "       [ 16.74678947],\n",
              "       [ 24.15915549],\n",
              "       [ 39.40906151],\n",
              "       [ 15.54486075],\n",
              "       [ 46.40196844],\n",
              "       [ 19.03845583],\n",
              "       [ 55.5782776 ],\n",
              "       [ 20.55765884],\n",
              "       [  4.87006908],\n",
              "       [ 43.16062012],\n",
              "       [ 39.28150989],\n",
              "       [ 30.01515935],\n",
              "       [  7.47972529],\n",
              "       [ 19.16565062],\n",
              "       [  3.41196332],\n",
              "       [  6.87268684],\n",
              "       [163.03541993],\n",
              "       [ 44.85132116],\n",
              "       [ 44.49617407],\n",
              "       [ 18.4782217 ],\n",
              "       [134.94374721],\n",
              "       [ 12.55719124],\n",
              "       [  6.07878506],\n",
              "       [ 42.79797022],\n",
              "       [  5.29774654],\n",
              "       [ 12.61114203],\n",
              "       [ 31.15813413],\n",
              "       [ 49.91342562],\n",
              "       [ 28.90469739],\n",
              "       [ 12.8094399 ],\n",
              "       [  6.87947601],\n",
              "       [  3.38338032],\n",
              "       [ 17.37919523],\n",
              "       [117.03631354],\n",
              "       [ 11.98695464],\n",
              "       [  4.88936326],\n",
              "       [  3.1843688 ],\n",
              "       [ 25.35822391],\n",
              "       [  5.28845675],\n",
              "       [ 66.0851452 ],\n",
              "       [ 12.4739419 ],\n",
              "       [ 28.05934687],\n",
              "       [ 29.18231288],\n",
              "       [ 19.74017673],\n",
              "       [ 22.20227064],\n",
              "       [ 29.39740239],\n",
              "       [  5.77794606],\n",
              "       [  4.24480931],\n",
              "       [172.349287  ],\n",
              "       [ 27.40407395],\n",
              "       [ 17.47423403],\n",
              "       [  4.07866935],\n",
              "       [  5.78294825],\n",
              "       [ 48.96053034],\n",
              "       [132.04254799],\n",
              "       [ 14.40367295],\n",
              "       [ 15.29975904],\n",
              "       [174.70026984],\n",
              "       [ 21.95145118],\n",
              "       [ 21.23222308],\n",
              "       [ 23.80758044],\n",
              "       [  5.43458937],\n",
              "       [120.77786586],\n",
              "       [116.56611697],\n",
              "       [125.03963858],\n",
              "       [ 39.17146356],\n",
              "       [ 35.59998006],\n",
              "       [  4.31305161],\n",
              "       [ 21.08109065],\n",
              "       [ 29.64000349],\n",
              "       [ 46.24190209],\n",
              "       [ 27.48660869],\n",
              "       [ 11.46137904],\n",
              "       [ 13.58547623],\n",
              "       [ 59.14476176],\n",
              "       [159.38390899],\n",
              "       [ 14.41903635],\n",
              "       [ 29.10478128],\n",
              "       [ 18.96771148],\n",
              "       [  7.43935045],\n",
              "       [ 20.31541457],\n",
              "       [ 20.43689257],\n",
              "       [ 13.09634327],\n",
              "       [ 15.4526794 ],\n",
              "       [  4.38558197],\n",
              "       [136.08422042],\n",
              "       [  4.54957909],\n",
              "       [ 65.53491355],\n",
              "       [ 25.46576866],\n",
              "       [ 27.39907271],\n",
              "       [ 31.93595744],\n",
              "       [  5.80653002],\n",
              "       [ 24.52287777],\n",
              "       [ 28.46951713],\n",
              "       [  3.17472172],\n",
              "       [ 39.49909907],\n",
              "       [ 79.47571054],\n",
              "       [  5.73400013],\n",
              "       [ 70.14933369],\n",
              "       [ 12.76763634],\n",
              "       [ 22.91685241],\n",
              "       [  5.63002789],\n",
              "       [128.7711846 ],\n",
              "       [  6.66402824],\n",
              "       [150.85036489],\n",
              "       [ 48.57536819],\n",
              "       [ 33.13645505],\n",
              "       [ 42.64040353],\n",
              "       [ 53.36486031],\n",
              "       [ 47.55744727],\n",
              "       [ 73.27813602],\n",
              "       [ 32.4486693 ],\n",
              "       [  3.10076287],\n",
              "       [  9.41159918],\n",
              "       [ 75.73415059],\n",
              "       [ 24.32529545],\n",
              "       [ 28.70711507],\n",
              "       [ 77.28730135],\n",
              "       [  3.51307716],\n",
              "       [ 19.07561306],\n",
              "       [112.79204992],\n",
              "       [ 54.43530473],\n",
              "       [  3.32907175],\n",
              "       [117.57653889],\n",
              "       [ 28.30444763],\n",
              "       [ 18.71975233],\n",
              "       [ 42.06266412],\n",
              "       [ 15.45946857],\n",
              "       [ 28.68960788],\n",
              "       [ 24.08019279],\n",
              "       [ 27.93429492],\n",
              "       [ 20.06245227],\n",
              "       [ 28.13938004],\n",
              "       [142.09672812],\n",
              "       [ 47.59746481],\n",
              "       [ 20.06137989],\n",
              "       [ 51.46406908],\n",
              "       [129.78161416],\n",
              "       [ 30.72295196],\n",
              "       [  5.02870671],\n",
              "       [  5.74150294],\n",
              "       [  7.03596888],\n",
              "       [  7.37360925],\n",
              "       [ 25.38323391],\n",
              "       [ 19.91775027],\n",
              "       [ 80.43860448],\n",
              "       [ 19.78054918],\n",
              "       [  9.3819438 ],\n",
              "       [ 20.354001  ],\n",
              "       [  9.89930104],\n",
              "       [132.12258307],\n",
              "       [ 36.29776829],\n",
              "       [ 40.27191922],\n",
              "       [ 66.1626768 ],\n",
              "       [  6.62829973],\n",
              "       [ 29.29485888],\n",
              "       [  6.00018156],\n",
              "       [  3.90109557],\n",
              "       [115.81580525],\n",
              "       [  3.64849056],\n",
              "       [ 27.99431932],\n",
              "       [ 27.23900445],\n",
              "       [ 32.21857417],\n",
              "       [ 18.98700661],\n",
              "       [148.38933572],\n",
              "       [ 26.71378663],\n",
              "       [  4.33842035],\n",
              "       [  6.66867313],\n",
              "       [ 26.34363391],\n",
              "       [121.05798101],\n",
              "       [ 14.05960071],\n",
              "       [ 22.63423568],\n",
              "       [ 36.66542134],\n",
              "       [ 12.38997891],\n",
              "       [  4.57173118],\n",
              "       [126.73034344],\n",
              "       [  3.28655407],\n",
              "       [ 24.68544378],\n",
              "       [ 19.49614643],\n",
              "       [135.94416284],\n",
              "       [ 35.95262367],\n",
              "       [  5.43458937],\n",
              "       [ 22.0161219 ],\n",
              "       [  4.87257018],\n",
              "       [ 80.12597459],\n",
              "       [ 31.62332755],\n",
              "       [ 29.14729849],\n",
              "       [ 31.4807684 ],\n",
              "       [  6.4246438 ],\n",
              "       [ 54.63288513],\n",
              "       [ 46.01680628],\n",
              "       [ 20.16535261],\n",
              "       [  3.52415297],\n",
              "       [ 51.16394516],\n",
              "       [ 41.64499105],\n",
              "       [139.21552622],\n",
              "       [ 55.73334462],\n",
              "       [ 55.98344852],\n",
              "       [  3.27476319],\n",
              "       [  6.22527498],\n",
              "       [ 17.58570956],\n",
              "       [ 24.72546133],\n",
              "       [ 31.75838389],\n",
              "       [ 13.53224004],\n",
              "       [ 13.7166018 ],\n",
              "       [ 47.68249922],\n",
              "       [ 42.76795515],\n",
              "       [ 18.82229394],\n",
              "       [144.94790351],\n",
              "       [ 31.82340953],\n",
              "       [ 17.47459085],\n",
              "       [ 27.84175578],\n",
              "       [ 38.65374664],\n",
              "       [127.17052112],\n",
              "       [ 12.02697123],\n",
              "       [  3.22581483],\n",
              "       [ 45.99429785],\n",
              "       [ 24.24526228],\n",
              "       [ 71.71998593],\n",
              "       [ 76.97716731],\n",
              "       [  4.64104585],\n",
              "       [ 24.93304803],\n",
              "       [ 32.14354223],\n",
              "       [ 19.69622842],\n",
              "       [ 42.30526521],\n",
              "       [148.63943963],\n",
              "       [ 15.44410517],\n",
              "       [ 19.4518413 ],\n",
              "       [ 43.04307098],\n",
              "       [ 47.54744098],\n",
              "       [ 45.02889661],\n",
              "       [116.65615071],\n",
              "       [ 24.28527791],\n",
              "       [ 13.50079769],\n",
              "       [ 73.49822105],\n",
              "       [  5.97660075],\n",
              "       [141.18634624],\n",
              "       [ 24.45785022],\n",
              "       [ 14.319709  ],\n",
              "       [ 15.95503101],\n",
              "       [ 39.94678338],\n",
              "       [131.47230375],\n",
              "       [ 17.93692588],\n",
              "       [ 27.58164749],\n",
              "       [ 18.78442115],\n",
              "       [ 23.0833492 ],\n",
              "       [ 20.07459949],\n",
              "       [116.38604185],\n",
              "       [ 28.64959224],\n",
              "       [  6.17168197],\n",
              "       [ 32.20606821],\n",
              "       [  3.19187185],\n",
              "       [ 24.41997743],\n",
              "       [ 20.81669476],\n",
              "       [ 27.9267902 ],\n",
              "       [ 65.07973024],\n",
              "       [ 53.35485401],\n",
              "       [ 24.66043377],\n",
              "       [ 47.89758874],\n",
              "       [ 16.33983443],\n",
              "       [146.57858587],\n",
              "       [  7.57833708],\n",
              "       [ 42.96053623],\n",
              "       [ 55.28065716],\n",
              "       [ 18.91804829],\n",
              "       [ 23.38240265],\n",
              "       [ 22.99224117],\n",
              "       [ 56.85630872],\n",
              "       [ 19.01487501],\n",
              "       [ 23.92762925],\n",
              "       [  8.68200988],\n",
              "       [ 87.951728  ],\n",
              "       [ 20.17928586],\n",
              "       [145.54815899],\n",
              "       [ 28.93471055],\n",
              "       [ 11.34847431],\n",
              "       [ 96.58031281],\n",
              "       [ 20.91137674],\n",
              "       [ 23.38240265],\n",
              "       [ 12.20847459],\n",
              "       [  3.32978611],\n",
              "       [ 39.99680721],\n",
              "       [  7.28500137],\n",
              "       [ 86.05093677],\n",
              "       [ 75.20643501],\n",
              "       [125.63988643],\n",
              "       [ 27.50411589],\n",
              "       [143.46729265],\n",
              "       [ 17.04905815],\n",
              "       [ 43.70334514],\n",
              "       [  8.07461413],\n",
              "       [  5.89871042],\n",
              "       [  3.52665383],\n",
              "       [142.55691076],\n",
              "       [ 48.22272458],\n",
              "       [ 14.79169064],\n",
              "       [ 28.78214701],\n",
              "       [126.110083  ],\n",
              "       [ 12.50252586],\n",
              "       [ 35.57997129],\n",
              "       [ 21.43409299],\n",
              "       [ 28.82966546],\n",
              "       [ 19.28248612],\n",
              "       [136.40436075],\n",
              "       [  6.07556984],\n",
              "       [ 17.69075274],\n",
              "       [ 18.64543594],\n",
              "       [  6.68796731],\n",
              "       [ 20.25181622],\n",
              "       [  3.41196332],\n",
              "       [ 14.98784471],\n",
              "       [ 24.37531547],\n",
              "       [ 24.19774193],\n",
              "       [ 16.01684334],\n",
              "       [ 25.24317634],\n",
              "       [161.87493414],\n",
              "       [ 36.28526233],\n",
              "       [139.05545606],\n",
              "       [ 11.83224731],\n",
              "       [  4.44453543],\n",
              "       [ 12.46965526],\n",
              "       [ 21.07501512],\n",
              "       [ 87.48403491],\n",
              "       [ 77.45737018],\n",
              "       [ 11.8811959 ],\n",
              "       [ 12.40677246],\n",
              "       [ 42.15770482],\n",
              "       [ 11.33918548],\n",
              "       [ 24.36280951],\n",
              "       [ 27.49160993],\n",
              "       [ 28.00182213],\n",
              "       [ 43.67083041],\n",
              "       [ 32.6037325 ],\n",
              "       [136.94457847],\n",
              "       [ 15.28975465],\n",
              "       [130.43187821],\n",
              "       [ 32.5612153 ],\n",
              "       [ 19.37037893],\n",
              "       [ 22.58742898],\n",
              "       [ 49.90342314],\n",
              "       [ 38.9263628 ],\n",
              "       [ 18.58540963],\n",
              "       [ 23.83259045],\n",
              "       [146.77866594],\n",
              "       [148.54940588],\n",
              "       [ 61.42320851],\n",
              "       [136.79452223],\n",
              "       [  9.36979562],\n",
              "       [ 33.86926148],\n",
              "       [ 95.09719847],\n",
              "       [ 27.23650479],\n",
              "       [ 15.25652723],\n",
              "       [  4.54278992],\n",
              "       [ 11.49567884],\n",
              "       [ 29.22232851],\n",
              "       [ 13.91311174],\n",
              "       [ 69.07138646],\n",
              "       [146.87871361],\n",
              "       [ 30.17272413],\n",
              "       [ 17.82866747],\n",
              "       [162.59523461],\n",
              "       [ 22.65853205],\n",
              "       [  5.01548663],\n",
              "       [ 18.96556864],\n",
              "       [147.9491504 ],\n",
              "       [ 49.51826099],\n",
              "       [ 30.43783366],\n",
              "       [ 18.46786049],\n",
              "       [146.22843429],\n",
              "       [ 37.42323587],\n",
              "       [ 22.19583829],\n",
              "       [  5.43709047],\n",
              "       [ 49.97345193],\n",
              "       [  4.47419033],\n",
              "       [ 19.05667667],\n",
              "       [  6.51575278],\n",
              "       [ 42.19271922],\n",
              "       [ 32.14604571],\n",
              "       [ 28.83966984],\n",
              "       [ 18.99843828],\n",
              "       [  7.32215956],\n",
              "       [ 14.50442854],\n",
              "       [  9.06967074],\n",
              "       [ 58.05931172],\n",
              "       [ 27.31403639],\n",
              "       [ 29.36488766],\n",
              "       [ 28.79715263],\n",
              "       [ 22.37091217],\n",
              "       [  4.35699896],\n",
              "       [  7.2156867 ],\n",
              "       [  8.11570309],\n",
              "       [ 12.28850776],\n",
              "       [ 28.85717704],\n",
              "       [ 83.41734293],\n",
              "       [ 12.40391311],\n",
              "       [168.72778731],\n",
              "       [  5.36027251],\n",
              "       [ 26.94888491],\n",
              "       [ 79.29062846],\n",
              "       [  3.39695698],\n",
              "       [ 56.2785693 ],\n",
              "       [ 31.64583599],\n",
              "       [ 21.80674918],\n",
              "       [148.43935955],\n",
              "       [ 26.52120746],\n",
              "       [  3.24189259],\n",
              "       [130.99210852],\n",
              "       [ 32.67126163],\n",
              "       [  6.62972892],\n",
              "       [ 52.03680917],\n",
              "       [172.20922943],\n",
              "       [ 11.0376314 ],\n",
              "       [ 16.79073588],\n",
              "       [ 16.05471613],\n",
              "       [  6.58542474],\n",
              "       [118.70700581],\n",
              "       [140.03587437],\n",
              "       [ 20.84241841],\n",
              "       [ 24.6929485 ],\n",
              "       [ 16.1522565 ],\n",
              "       [ 43.10309729],\n",
              "       [154.17173684],\n",
              "       [159.86410422],\n",
              "       [  3.39517025],\n",
              "       [  3.33979026],\n",
              "       [ 27.54413152],\n",
              "       [  9.6706351 ],\n",
              "       [ 24.06018402],\n",
              "       [143.50730256],\n",
              "       [ 11.71755656],\n",
              "       [ 19.17172424],\n",
              "       [  6.10272412],\n",
              "       [ 50.20604673],\n",
              "       [ 56.03346854],\n",
              "       [  7.67730713],\n",
              "       [ 18.41283923],\n",
              "       [ 39.85174649],\n",
              "       [ 53.09975078],\n",
              "       [ 14.47691696],\n",
              "       [ 24.13521595],\n",
              "       [  7.98600672],\n",
              "       [  7.95849514],\n",
              "       [ 11.63537959],\n",
              "       [  8.83421564],\n",
              "       [  6.62401165],\n",
              "       [128.30098804],\n",
              "       [  3.40374591],\n",
              "       [ 57.56410324],\n",
              "       [ 55.81587936],\n",
              "       [ 89.77248414],\n",
              "       [ 15.87642799],\n",
              "       [162.96539878],\n",
              "       [ 20.0585215 ],\n",
              "       [117.38645748],\n",
              "       [ 15.90393957],\n",
              "       [145.67821791],\n",
              "       [ 47.22230895],\n",
              "       [134.39353082],\n",
              "       [ 12.01089227],\n",
              "       [ 20.0717411 ],\n",
              "       [ 31.93095429],\n",
              "       [ 28.401988  ],\n",
              "       [ 47.60996695],\n",
              "       [ 28.54454715],\n",
              "       [ 25.02022719],\n",
              "       [ 26.7162882 ],\n",
              "       [  8.75668404],\n",
              "       [ 46.6470692 ],\n",
              "       [ 24.7704801 ],\n",
              "       [  6.97915922],\n",
              "       [154.56189832],\n",
              "       [ 15.28868323],\n",
              "       [151.29055021],\n",
              "       [ 40.51202065],\n",
              "       [165.83658675],\n",
              "       [ 23.78757167],\n",
              "       [  3.10397833],\n",
              "       [149.10963619],\n",
              "       [ 12.1405896 ],\n",
              "       [ 29.02224653],\n",
              "       [ 14.26182744],\n",
              "       [  9.37336862],\n",
              "       [ 26.59373782],\n",
              "       [134.79369097],\n",
              "       [ 48.37278463],\n",
              "       [  5.47174804],\n",
              "       [  3.68028879],\n",
              "       [ 22.12080826],\n",
              "       [ 14.25575478],\n",
              "       [ 19.03166666],\n",
              "       [ 12.45715025],\n",
              "       [ 44.7612836 ],\n",
              "       [ 16.70355671],\n",
              "       [ 10.28517589],\n",
              "       [ 50.76377738],\n",
              "       [  5.99911014],\n",
              "       [ 25.05559841],\n",
              "       [  3.4434052 ],\n",
              "       [ 29.855093  ],\n",
              "       [ 43.58079285],\n",
              "       [133.48314894],\n",
              "       [ 38.35362271],\n",
              "       [ 65.59494367],\n",
              "       [139.30555997],\n",
              "       [ 48.42030499],\n",
              "       [ 18.98093109],\n",
              "       [  6.80694565],\n",
              "       [ 51.82922247],\n",
              "       [  5.10659609],\n",
              "       [ 37.01556528],\n",
              "       [127.42062503],\n",
              "       [167.31719761],\n",
              "       [  6.59257073],\n",
              "       [148.08920798],\n",
              "       [  4.80575613],\n",
              "       [ 67.13808051],\n",
              "       [ 42.81047617],\n",
              "       [ 12.87660934],\n",
              "       [ 10.68427033],\n",
              "       [ 20.04530189],\n",
              "       [  9.30512585],\n",
              "       [ 15.869282  ],\n",
              "       [ 39.73669701],\n",
              "       [ 27.28152357],\n",
              "       [ 18.80978989],\n",
              "       [ 13.48221907],\n",
              "       [ 42.91301588],\n",
              "       [132.37268698],\n",
              "       [  3.08111188],\n",
              "       [ 13.74268419],\n",
              "       [ 11.13481495],\n",
              "       [  7.66408705],\n",
              "       [ 60.0326314 ],\n",
              "       [ 43.77837708],\n",
              "       [ 51.8867453 ],\n",
              "       [122.78870341],\n",
              "       [ 17.5571256 ],\n",
              "       [ 55.56827512],\n",
              "       [  6.65045182],\n",
              "       [ 25.56080746],\n",
              "       [ 12.32352216],\n",
              "       [ 30.03016497],\n",
              "       [115.77328423],\n",
              "       [170.41849217]])"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mae = mean_absolute_error(y_test,y_pred)"
      ],
      "metadata": {
        "id": "36vu7uxNfWKh"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(mae)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2hmcFfZgfWSC",
        "outputId": "ba20f1a0-458c-46a5-9b1e-45be9c8c98e7"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.6013699780263352\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(14,7))\n",
        "plt.plot(y_test,label='ActualPrices', color='blue')\n",
        "plt.plot(y_pred,label='PredictedPrices', color='red')\n",
        "plt.title('Actual vs. Predicted Stock Prices')\n",
        "plt.xlabel('Days')\n",
        "plt.ylabel('Price')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "EvAbfRy5fWda",
        "outputId": "23e76efc-4f28-4523-ea8a-f4589875f91f"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "M2RzMB8Yah6Z"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qJL4UySnfoZE"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Y-NDs8Kqfofq"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "w8RFIu8rfomd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SkxnXPEZfosl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "d2maySdvfoyr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "e8rYWy-Efo4m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZLnynGdpfpEG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uwyEa99KfpJE"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}